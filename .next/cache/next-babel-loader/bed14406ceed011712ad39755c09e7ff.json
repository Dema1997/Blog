{"ast":null,"code":"import dbConnect from '../../../utils/dbConnect';\nimport User from '../../../models/User';\ndbConnect();\nexport default findById = async (req, res) => {\n  const {\n    query: {\n      id\n    },\n    method\n  } = req;\n\n  switch (method) {\n    case 'GET':\n      try {\n        const user = await User.findById(id);\n\n        if (!user) {\n          return res.status(400).json({\n            success: false\n          });\n        }\n\n        res.status(200).json({\n          success: true,\n          data: user\n        });\n      } catch (error) {\n        res.status(400).json({\n          success: false\n        });\n      }\n\n      break;\n\n    case 'PUT':\n      try {\n        const user = await User.findByIdAndUpdate(id, req.body, {\n          new: true,\n          runValidators: true\n        });\n\n        if (!user) {\n          return res.status(400).json({\n            success: false\n          });\n        }\n\n        res.status(200).json({\n          success: true,\n          data: user\n        });\n      } catch (error) {\n        res.status(400).json({\n          success: false\n        });\n      }\n\n      break;\n\n    case 'DELETE':\n      try {\n        const deletedUser = await User.deleteOne({\n          _id: id\n        });\n\n        if (!deletedUser) {\n          return res.status(400).json({\n            success: false\n          });\n        }\n\n        res.status(200).json({\n          success: true,\n          data: {}\n        });\n      } catch (error) {\n        res.status(400).json({\n          success: false\n        });\n      }\n\n      break;\n\n    default:\n      res.status(400).json({\n        success: false\n      });\n      break;\n  }\n};","map":{"version":3,"sources":["C:/Users/User/Desktop/Blog/Blog/pages/api/users/[id].js"],"names":["dbConnect","User","findById","req","res","query","id","method","user","status","json","success","data","error","findByIdAndUpdate","body","new","runValidators","deletedUser","deleteOne","_id"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,0BAAtB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AAEAD,SAAS;AAET,eAAeE,QAAQ,GAAG,OAAOC,GAAP,EAAYC,GAAZ,KAAmB;AACzC,QAAM;AACFC,IAAAA,KAAK,EAAE;AAAEC,MAAAA;AAAF,KADL;AAEFC,IAAAA;AAFE,MAGFJ,GAHJ;;AAKA,UAAOI,MAAP;AACI,SAAK,KAAL;AACI,UAAI;AACA,cAAMC,IAAI,GAAG,MAAMP,IAAI,CAACC,QAAL,CAAcI,EAAd,CAAnB;;AACA,YAAG,CAACE,IAAJ,EAAS;AACL,iBAAOJ,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAC;AAAV,WAArB,CAAP;AACH;;AACDP,QAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,UAAAA,OAAO,EAAC,IAAT;AAAeC,UAAAA,IAAI,EAAEJ;AAArB,SAArB;AACH,OAND,CAMC,OAAMK,KAAN,EAAY;AACTT,QAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,UAAAA,OAAO,EAAC;AAAT,SAArB;AACH;;AACD;;AACJ,SAAK,KAAL;AACI,UAAG;AACC,cAAMH,IAAI,GAAG,MAAMP,IAAI,CAACa,iBAAL,CAAuBR,EAAvB,EAA2BH,GAAG,CAACY,IAA/B,EAAqC;AACpDC,UAAAA,GAAG,EAAE,IAD+C;AAEpDC,UAAAA,aAAa,EAAE;AAFqC,SAArC,CAAnB;;AAIA,YAAG,CAACT,IAAJ,EAAS;AACL,iBAAOJ,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,YAAAA,OAAO,EAAE;AAAV,WAArB,CAAP;AACH;;AACDP,QAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,UAAAA,OAAO,EAAC,IAAT;AAAeC,UAAAA,IAAI,EAACJ;AAApB,SAArB;AACH,OATD,CASC,OAAMK,KAAN,EAAY;AACTT,QAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,UAAAA,OAAO,EAAC;AAAT,SAArB;AACH;;AACD;;AACJ,SAAK,QAAL;AACI,UAAG;AACC,cAAMO,WAAW,GAAC,MAAMjB,IAAI,CAACkB,SAAL,CAAe;AAACC,UAAAA,GAAG,EAAEd;AAAN,SAAf,CAAxB;;AAEA,YAAG,CAACY,WAAJ,EAAgB;AACZ,iBAAOd,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,YAAAA,OAAO,EAAC;AAAT,WAArB,CAAP;AACH;;AACDP,QAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,UAAAA,OAAO,EAAC,IAAT;AAAeC,UAAAA,IAAI,EAAC;AAApB,SAArB;AACH,OAPD,CAOC,OAAMC,KAAN,EAAY;AACTT,QAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,UAAAA,OAAO,EAAC;AAAT,SAArB;AACH;;AACD;;AACJ;AACIP,MAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,QAAAA,OAAO,EAAC;AAAT,OAArB;AACA;AAxCR;AA0CH,CAhDD","sourcesContent":["import dbConnect from '../../../utils/dbConnect'\r\nimport User from '../../../models/User'\r\n\r\ndbConnect()\r\n\r\nexport default findById = async (req, res) =>{\r\n    const {\r\n        query: { id },\r\n        method\r\n    } = req\r\n\r\n    switch(method) {\r\n        case 'GET':\r\n            try {\r\n                const user = await User.findById(id)\r\n                if(!user){\r\n                    return res.status(400).json({ success:false})\r\n                }\r\n                res.status(200).json({success:true, data: user})\r\n            }catch(error){\r\n                res.status(400).json({success:false})\r\n            }\r\n            break;\r\n        case 'PUT':\r\n            try{\r\n                const user = await User.findByIdAndUpdate(id, req.body, {\r\n                    new: true,\r\n                    runValidators: true\r\n                });\r\n                if(!user){\r\n                    return res.status(400).json({success: false})\r\n                }\r\n                res.status(200).json({success:true, data:user})\r\n            }catch(error){\r\n                res.status(400).json({success:false})\r\n            }\r\n            break;\r\n        case 'DELETE':\r\n            try{\r\n                const deletedUser=await User.deleteOne({_id: id})\r\n\r\n                if(!deletedUser){\r\n                    return res.status(400).json({success:false})\r\n                }\r\n                res.status(200).json({success:true, data:{}})\r\n            }catch(error){\r\n                res.status(400).json({success:false})\r\n            }\r\n            break;\r\n        default:\r\n            res.status(400).json({success:false})\r\n            break;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}